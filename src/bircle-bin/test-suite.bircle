s:export OLDPIPE = ${&pipe-symbol||>pipe>} ;;
s:export OLDAND = ${&and-symbol||>and>} ;;
s:export OLDOR = ${&and-symbol||>or>} ;;
@ {user} unsetting pipe-symbol, and-symbol, and or-symbol for testing ;;
y:s:option pipe-symbol ;;
y:s:option and-symbol ;;
y:s:option or-symbol ;;

s:export FAILEDTESTS = ;;

s:export line-number = $(n:assert -title=line-number $(echo ${LINENO}) >test> = 1) ;;

s:export calc-syntax = $(n:assert -title=Calc-syntax $[3 + 3] >test> = 6) ;;

s:export advanced-calc-syntax = $(n:assert -title=Advanced-calc-syntax $[$(echo -D 1) * 5] >test> = 5) ;;

s:export option-parsing = $(n:assert -title=Option-parsing $(opts -a -b -c -a=\s{hi there}) >test> T= **a**: `hi there`
**b**: `true`
**c**: `true`) ;;

s:export some-pipes = $(n:assert -title=Some-pipes $(echo -D $["this is neat"] >pipe> rev) >test> T= taen si siht) ;;

s:export macros = $(n:assert -title=macros $(s:export test = echo -D hi ;; ${test>!>}) >test> = hi) ;;

s:export advanced-macros = $(n:assert -title=advanced-macros $(s:export test = echo -D \${#0} \${#1} ;; ${test>!>one+two}) >test> = one two) ;;

s:export and = $(n:assert -title=and $(echo -D before and >and> echo -D after and ;; raw {"status": 1, "content": "fail"} >and> echo -D FAIL ;; echo -D should run) >test> = before andafter andfailshould run) ;;
s:export and2 = $(n:assert -title=and2 $(echo -D before and >pipe> rev >and> echo -D after and ;; raw {"status": 1, "content": "fail"} >and> echo -D FAIL ;; echo -D should run) >test> = dna erofebafter andfailshould run) ;;

@ {user} unsetting pipe-symbol, and-symbol, and or-symbol back;;
y:s:option pipe-symbol ${OLDPIPE} ;;
y:s:option and-symbol ${OLDAND} ;;
y:s:option or-symbol ${OLDOR} ;;

paged-embed ${line-number}
${calc-syntax}
${advanced-calc-syntax}
${option-parsing}
${some-pipes}
${macros}
${advanced-macros}
${and}
${and2}
