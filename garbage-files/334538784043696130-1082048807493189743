async (_msg, args, sendCallback) => {
                let opts;
                [opts, args] = (0, util_1.getOpts)(args);
                let commands = (0, common_to_commands_1.getCommands)();
                if (opts['of-file']) {
                    let file = opts['of-file'];
                    if (fs_1.default.existsSync(`./${file}.ts`)) {
                        return {
                            files: [
                                {
                                    attachment: `./${file}.ts`,
                                    delete: false,
                                    name: `${file}.ts`,
                                }
                            ],
                            status: common_to_commands_1.StatusCode.RETURN,
                            mimetype: "application/typescript"
                        };
                    }
                    return { content: `./${file}.ts not found`, status: common_to_commands_1.StatusCode.ERR };
                }
                let cmd = args[0];
                if (!cmd) {
                    return { content: "No cmd  chosen", status: common_to_commands_1.StatusCode.ERR };
                }
                let attrs = args.slice(1);
                if (attrs.length === 0) {
                    attrs.push("run");
                }
                let command = Array.from(commands.entries()).filter(v => v[0] === cmd)[0]?.[1];
                if (!command)
                    return { content: "no command found", status: common_to_commands_1.StatusCode.ERR };
                let results = [];
                let curAttr = command;
                for (let attr of attrs) {
                    for (let subAttr of attr.split(".")) {
                        //@ts-ignore
                        curAttr = curAttr[subAttr];
                        if (curAttr === undefined)
                            break;
                    }
                    if (curAttr !== undefined) {
                        if (typeof curAttr === 'object') {
                            results.push(JSON.stringify(curAttr));
                        }
                        else {
                            results.push(String(curAttr));
                        }
                    }
                }
                return {
                    content: `\`\`\`javascript\n${results.join("\n")}\n\`\`\``, status: common_to_commands_1.StatusCode.RETURN, mimetype: "application/javascript", onOver2kLimit: (_, rv) => {
                        rv.content = rv.content?.replace("```javascript\n", "")?.replace(/```$/, "");
                        return rv;
                    }
                };
            }
